name: build and deploy
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.12"
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-node-modules-
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ github.workspace }}/dist/
      - name: Verify build output
        run: |
          ls -R ${{ github.workspace }}/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create local directory
        run: mkdir -p ${{ github.workspace }}/local

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ${{ github.workspace }}/local/

      - name: Verify downloaded files
        run: |
          ls -R ${{ github.workspace }}/local  # 确认文件结构，后续scp需对应路径

      - name: Verify SSH login user and server environment
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }} # 使用统一的密钥Secret
          debug: true
          script: |
            echo "===== 登录用户信息 ====="
            whoami
            echo "用户家目录：$(echo $HOME)"

            if [ ! -d "/www" ]; then
              echo "目录 /www 不存在，创建中..."
              sudo mkdir -p /www
              sudo chown -R $(whoami) /www
              chmod 775 /www
            else
              echo "目录 /www 已存在"
            fi

      - name: 准备SSH环境（修正私钥格式）
        run: |
          # 创建SSH目录并设置权限
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh/

          # 使用printf避免额外换行，确保私钥格式完整
          printf "%s" "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa  # 统一使用SERVER_SSH_KEY

          # 严格设置私钥权限（必须为600）
          chmod 600 ~/.ssh/id_rsa

          # 添加服务器到已知主机，避免验证提示
          ssh-keyscan -H "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # 调试：检查私钥头部是否正确（仅显示前2行，避免泄露密钥）
          echo "私钥头部验证："
          head -n 2 ~/.ssh/id_rsa

      - name: Copy files to server（修正文件路径）
        run: |
          # 注意：根据前面的ls -R确认实际文件路径，若local下是dist内容，需调整路径
          # 示例：若local下直接是前端文件（如index.html），传输整个目录
          scp -i ~/.ssh/id_rsa -r ${{ github.workspace }}/local/* ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/www/

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            echo '===== /www 目录内容 ====='
            ls -R /www
            echo '===== 部署验证完成 ====='
          "
